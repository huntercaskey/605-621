package turing;

import java.util.ArrayList;
import java.io.FileWriter;

/**
 * @author Hunter R. Caskey
 * 
 * Driver program to test the Turing Machine implementation required by the Programming Assignment #1 for JHU 605.621, Fall 2019 semester.
 *
 */
public class TuringMachineDriver {

	/**
	 * main driver to test the various implementation of Turing machines. The driver executes one test for each of the Turing machines defined in the 
	 * homework specification. 
	 * 
	 * @param args Command line arguments (unused)
	 */
	public static void main(String[] args) {
		testProblem2a();
		testProblem2bi();
		testProblem2bii();
		testProblem2biii();
	}


	/**
	 * Create a Turing machine as specified in Problem #2a. The machine accepts languages whose elements have '00' on the rightmost side of the element.
	 * Output for this test is written to 'problem2a_output.txt' in the root project directory on program execution if the number of output lines generated by this Turing machine execution is greater
	 * than 30. Otherwise output will be written to standard output. The final state will result in -1 if the input string is accepted by the machine, otherwise -2.
	 */
	public static void testProblem2a() {
		
		TuringMachine twoRightMostSymbolsAreZeroMachine = new TuringMachine();
		twoRightMostSymbolsAreZeroMachine.addTransitionRules( new TransitionRule[] {  
				
				// State 0 rules
				new TransitionRule(0,'0',0,'0',1),
				new TransitionRule(0,'1',0,'1',1),
				new TransitionRule(0,'b',1,'b',-1),
				// State 1 rules
				new TransitionRule(1,'0',2,'b',-1),
				new TransitionRule(1,'1',3,'b',-1),
				new TransitionRule(1,'b',-2,'b',-1), // Informally designate -2 as the rejecting state
				// State 2 rules
				new TransitionRule(2,'0',-1,'b',-1), // Infomally designate -1 as the accepting state
				new TransitionRule(2,'1',-2,'b',-1),
				new TransitionRule(2,'b',-2,'b',-1),
				// State 3 rules
				new TransitionRule(3,'0',-2,'b',-1),
				new TransitionRule(3,'1',-2,'b',-1),
				new TransitionRule(3,'b',-2,'b',-1),
				
		});

		ArrayList<String> logAggregator = new ArrayList<>();
		String inputStr = "10100";
		char[] input = inputStr.toCharArray();
		Tape tape = new Tape(input);
		int finalState = twoRightMostSymbolsAreZeroMachine.execute(tape, logAggregator);
		
		outputTestResults(logAggregator, "problem2a_output.txt");
		
		logAggregator.add("\nRunning twoRightMostSymbolsAreZeroMachine. Input string='" + inputStr + "'. Final state should be: -1");
		logAggregator.add("Final tape contents are: '" + tape.toString(false) + "' and the final state is: " + finalState);
	}

	/**
	 * Create a Turing machine as specified in Problem #2bi. The machine calculates the sum of two binary numbers. 
	 * The assumed format of the input string is XbY, where X and Y represent the binary numbers to add.
	 * Output for this test is written to 'problem2bi_output.txt' in the root project directory on program execution if 
	 * the output of the Turing machine execution is greater than 30 lines. Otherwise output will be written to standard output.
	 */
	public static void testProblem2bi() {
		
		TuringMachine binaryAdderMachine = new TuringMachine();
		ArrayList<String> logAggregator = new ArrayList<>();
		binaryAdderMachine.addTransitionRules( new TransitionRule[] {  
				
				new TransitionRule(0, 'b', 0, 'b', 1),
				new TransitionRule(0, '0', 1, '0', 1),
				new TransitionRule(0, '1', 1, '1', 1),
				
				new TransitionRule(1, 'b', 2, 'b', 1),
				new TransitionRule(1, '0', 1, '0', 1),
				new TransitionRule(1, '1', 1, '1', 1),
				new TransitionRule(1, 'x', 1, 'x', 1),
				new TransitionRule(1, 'y', 1, 'y', 1),
				
				new TransitionRule(2, 'b', 3, 'b', -1),
				new TransitionRule(2, '0', 2, '0', 1),
				new TransitionRule(2, '1', 2, '1', 1),
				
				new TransitionRule(3, 'b', 9, 'b', -1),
				new TransitionRule(3, '0', 4, 'b', -1),
				new TransitionRule(3, '1', 6, 'b', -1),
				
				new TransitionRule(4, 'b', 5, 'b', -1),
				new TransitionRule(4, '0', 4, '0', -1),
				new TransitionRule(4, '1', 4, '1', -1),
				
				new TransitionRule(5, '0', 1, 'x', 1),
				new TransitionRule(5, '1', 1, 'y', 1),
				new TransitionRule(5, 'x', 5, 'x', -1),
				new TransitionRule(5, 'y', 5, 'y', -1),
				new TransitionRule(5, 'b', 1, 'x', 1),
				
				new TransitionRule(6, 'b', 7, 'b', -1),
				new TransitionRule(6, '0', 6, '0', -1),
				new TransitionRule(6, '1', 6, '1', -1),
				
				new TransitionRule(7, '0', 1, 'y', 1),
				new TransitionRule(7, '1', 8, 'x', -1),
				new TransitionRule(7, 'x', 7, 'x', -1),
				new TransitionRule(7, 'y', 7, 'y', -1),
				new TransitionRule(7, 'b', 1, 'y', 1),
				
				new TransitionRule(8, 'b', 1, '1', 1),
				new TransitionRule(8, '0', 1, '1', 1),
				new TransitionRule(8, '1', 8, '0', -1),

				new TransitionRule(9, 'b', -1, 'b', 1),
				new TransitionRule(9, '0', -1, '0', 1),
				new TransitionRule(9, '1', -1, '1', 1),
				new TransitionRule(9, 'x', 9, '0', -1),
				new TransitionRule(9, 'y', 9, '1', -1)

		});

		String inputStr = "1011b1011";
		char[] input = inputStr.toCharArray();
		Tape tape = new Tape(input);
		int finalState = binaryAdderMachine.execute(tape, logAggregator);
		
		logAggregator.add("\nRunning binaryAdderMachine. Input string='" + inputStr + "'. Output should be: 010110");
		logAggregator.add( "Final tape contents are: '" + tape.toString(false) + "' and the final state is: " + finalState);
		
		outputTestResults(logAggregator, "problem2bi_output.txt");
	}

	/**
	 * Create a Turing machine as specified in Problem #2bii. The machine calculates the difference of two binary numbers. 
	 * The assumed format of the input string is XbY, where X and Y represent the binary numbers to subtract.
	 * Note that the operation of this machine is such that if the value of X and Y are not equal, the machine will subtract whichever 
	 * number is smaller from the other.
	 * Output for this test is written to 'problem2bii_output.txt' in the root project directory on program execution if 
	 * the output of the Turing machine execution is greater than 30 lines. Otherwise output will be written to standard output.
	 */
	public static void testProblem2bii() {
		TuringMachine binarySubtractionMachine = new TuringMachine();
		ArrayList<String> logAggregator = new ArrayList<>();
		binarySubtractionMachine.addTransitionRules( new TransitionRule[] {  

				new TransitionRule(0, 'b', 1, 'b', +1),
				new TransitionRule(0, '*', 0, '*', +1),
				
				new TransitionRule(1, 'b', 2, 'b', -1),
				new TransitionRule(1, '*', 1, '*', +1),
				
				new TransitionRule(2, '0', 2, '1', -1),
				new TransitionRule(2, '1', 3, '0', +1),
				
				new TransitionRule(3, 'b', 4, 'b', -1),  
				new TransitionRule(3, '*', 3, '*', +1),  
				
				new TransitionRule(4, 'b', 5, 'b', -1),  
				new TransitionRule(4, '*', 4, '*', -1),
				
				new TransitionRule(5, '0', 5, '1', -1),
				new TransitionRule(5, '1', 6, '0', +1),
				
				new TransitionRule(6, 'b', 7, 'b', +1),   
				new TransitionRule(6, '*', 6, '*', +1), 
				
				new TransitionRule(7, 'b', 8, 'b', -1),  
				new TransitionRule(7, '*', 7, '*', +1), 
				
				new TransitionRule(8, 'b', 13, 'b', +1), // go to cleanup
				new TransitionRule(8, '0', 8, '0', -1), 
				new TransitionRule(8, '1', 9, '1', -1),
				
				new TransitionRule(9, 'b', 10, 'b', -1),
				new TransitionRule(9, '*', 9, '*', -1),
				
				new TransitionRule(10, 'b', 13, 'b', +1), // go to cleanup
				new TransitionRule(10, '0', 10, '0', -1), 
				new TransitionRule(10, '1', 11, '1', +1),
				
				new TransitionRule(11, 'b', 12, 'b', +1),
				new TransitionRule(11, '*', 11, '*', +1),
				
				new TransitionRule(12, 'b', 2, 'b', -1),
				new TransitionRule(12, '*', 12, '*', +1),
				
				new TransitionRule(13, 'b', -1, 'b', 0),
				new TransitionRule(13, '*', 13, 'b', +1)
				
		});

		String inputStr = "10b1010";
		char[] input = inputStr.toCharArray();
		Tape tape = new Tape(input);
		int finalState = binarySubtractionMachine.execute(tape, logAggregator);
		
		logAggregator.add("Running binarySubtractionMachine. Input string='" + inputStr + "'. Output should be: '1000'");
		logAggregator.add( "Final tape contents are: '" + tape.toString(false) + "' and the final state is: " + finalState);
		outputTestResults(logAggregator, "problem2bii_output.txt");
	}
 
	/**
	 * Create a Turing machine as specified in Problem #2biii. The machine calculates the product of two binary numbers. 
	 * The assumed format of the input string is XbY, where X and Y represent the binary numbers to multiply.
	 * Output for this test is written to 'problem2biii_output.txt' in the root project directory on program execution if 
	 * the output of the Turing machine execution is greater than 30 lines. Otherwise output will be written to standard output.
	 */
	public static void testProblem2biii() {
		TuringMachine binaryMultiplierMachine = new TuringMachine();
		ArrayList<String> logAggregator = new ArrayList<>();
		binaryMultiplierMachine.addTransitionRules( new TransitionRule[] {  

				new TransitionRule(0, 'b', 1, 'A', +1),
				new TransitionRule(0, '*', 0, '*', +1),
				
				new TransitionRule(1, 'b', 2, 'B', -1),
				new TransitionRule(1, '*', 1, '*', +1),
				
				new TransitionRule(2, '0', 2, 'P', -1),
				new TransitionRule(2, '1', 3, 'Y', +1),
				new TransitionRule(2, 'X', 2, 'P', -1),
				new TransitionRule(2, 'Y', 2, 'Q', -1),
				new TransitionRule(2, 'A', 13, 'A', +1),
				
				new TransitionRule(3, 'b', 4, 'C', -1),
				new TransitionRule(3, '*', 3, '*', +1),
				
				new TransitionRule(4, 'b', 5, 'b', +1),
				new TransitionRule(4, '*', 4, '*', -1),
				
				new TransitionRule(5, 'X', 5, 'X', +1),
				new TransitionRule(5, 'Y', 5, 'Y', +1),
				new TransitionRule(5, '0', 6, 'X', +1),
				new TransitionRule(5, '1', 7, 'Y', +1),
				new TransitionRule(5, 'A', 8, 'A', -1),
				
				new TransitionRule(6, 'b', 4, '0', -1),
				new TransitionRule(6, '*', 6, '*', +1),
				
				new TransitionRule(7, 'b', 4, '1', -1),
				new TransitionRule(7, '*', 7, '*', +1),

				new TransitionRule(8, 'X', 8, '0', -1),
				new TransitionRule(8, 'Y', 8, '1', -1),
				new TransitionRule(8, 'b', 9, 'b', +1),
				
				new TransitionRule(9, 'A', 10, 'A', +1),
				new TransitionRule(9, '*', 9, '*', +1),

				new TransitionRule(10, 'P', 11, 'X', +1),
				new TransitionRule(10, 'Q', 11, 'Y', +1),
				new TransitionRule(10, 'B', 2 , 'B', -1),
				new TransitionRule(10, '*', 10, '*', +1),
				
				new TransitionRule(11, 'b', 12, '0', -1),
				new TransitionRule(11, '*', 11, '*', +1),
				
				new TransitionRule(12, 'A', 10, 'A', +1),
				new TransitionRule(12, '*', 12, '*', -1),

				new TransitionRule(13, 'b', 14, 'b', +1),
				new TransitionRule(13, '*', 13, '*', -1),
				
				new TransitionRule(14, 'B', 15, 'B', -1),
				new TransitionRule(14, '*', 14, 'b', +1),
				
				new TransitionRule(15, 'b', 16, '0', +1),

				new TransitionRule(16, 'b', 17 , 'b', -1),
				new TransitionRule(16, '*', 16 , '*', +1),
				
				new TransitionRule(17, '0', 18 , 'b', -1),
				new TransitionRule(17, '1', 19 , 'b', -1),
				new TransitionRule(17, 'C', 24 , 'b', -1),  
				new TransitionRule(17, 'B', 25, 'b', -1),  
				
				new TransitionRule(18, 'B', 20 , 'B', -1),
				new TransitionRule(18, '*', 18 , '*', -1),
				
				new TransitionRule(19, 'B', 21 , 'B', -1),
				new TransitionRule(19, '*', 19 , '*', -1),
				
				new TransitionRule(20, 'X', 20 , 'X', -1),
				new TransitionRule(20, 'Y', 20 , 'Y', -1),
				new TransitionRule(20, '0', 16 , 'X', +1),
				new TransitionRule(20, '1', 16 , 'Y', +1),
				new TransitionRule(20, 'b', 16 , 'X', +1),
				
				new TransitionRule(21, 'X', 21 , 'X', -1),
				new TransitionRule(21, 'Y', 21 , 'Y', -1),
				new TransitionRule(21, '0', 22 , '1', +1),
				new TransitionRule(21, '1', 21 , '0', -1),
				new TransitionRule(21, 'b', 22 , '1', +1),
				
				new TransitionRule(22, 'X', 23 , 'X', -1),
				new TransitionRule(22, 'Y', 23 , 'Y', -1),
				new TransitionRule(22, 'B', 23 , 'B', -1),
				new TransitionRule(22, '*', 22 , '*', +1),
				
				new TransitionRule(23, '0', 16 , 'X', +1),
				new TransitionRule(23, '1', 16 , 'Y', +1),

				new TransitionRule(24, 'b', 16, 'b', +1),
				new TransitionRule(24, 'X', 24, '0', -1),
				new TransitionRule(24, 'Y', 24, '1', -1),
				new TransitionRule(24, '*', 24, '*', -1),

				new TransitionRule(25, 'b', -1, 'b', +1),
				new TransitionRule(25, '*', 25, '*', -1)
		});

		String inputStr = "1111b10";
		char[] input = inputStr.toCharArray();
		Tape tape = new Tape(input);
		int finalState = binaryMultiplierMachine.execute(tape, logAggregator);
		
		logAggregator.add("Running binaryMultiplierMachine. Input string='" + inputStr + "'. Output should be: '011110'");
		logAggregator.add( "Final tape contents are: '" + tape.toString(false) + "' and the final state is: " + finalState);
		outputTestResults(logAggregator, "problem2biii_output.txt");
	}
	
	/**
	 * Outputs the given log statements to the command line if the number of lines to print is less than 30, otherwise
	 * writes the lines to the specified file.
	 * 
	 * @param logger ArrayList containing all of the log statements to output.
	 * @param fileName The name of the file that logs should be written to.
	 */
	public static void outputTestResults(ArrayList<String> logger, String fileName) {
		if(logger.size() <= 30) {
			for(String msg : logger) {
				System.out.println(msg);
			}
		}
		else {
			FileWriter writer;
			try {
				writer = new FileWriter(fileName);
				for(String msg : logger) {
					writer.write(msg + System.lineSeparator());
				}
				writer.close();
			}
			catch(Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}
}